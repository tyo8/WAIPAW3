#!/bin/sh

#   dual_regression - take group-ICA maps (etc) and get subject-specific versions of them (and associated timecourses)
#
#   Stephen Smith, Christian Beckmann, Janine Bijsterbosch, Sam Harrison, FMRIB Image Analysis Group
#
#   Copyright (C) 2011-2019 University of Oxford
#
#   Part of FSL - FMRIB's Software Library
#   http://www.fmrib.ox.ac.uk/fsl
#   fsl@fmrib.ox.ac.uk
#
#   Developed at FMRIB (Oxford Centre for Functional Magnetic Resonance
#   Imaging of the Brain), Department of Clinical Neurology, Oxford
#   University, Oxford, UK
#
#
#   LICENCE
#
#   FMRIB Software Library, Release 6.0 (c) 2018, The University of
#   Oxford (the "Software")
#
#   The Software remains the property of the Oxford University Innovation
#   ("the University").
#
#   The Software is distributed "AS IS" under this Licence solely for
#   non-commercial use in the hope that it will be useful, but in order
#   that the University as a charitable foundation protects its assets for
#   the benefit of its educational and research purposes, the University
#   makes clear that no condition is made or to be implied, nor is any
#   warranty given or to be implied, as to the accuracy of the Software,
#   or that it will be suitable for any particular purpose or for use
#   under any specific conditions. Furthermore, the University disclaims
#   all responsibility for the use which is made of the Software. It
#   further disclaims any liability for the outcomes arising from using
#   the Software.
#
#   The Licensee agrees to indemnify the University and hold the
#   University harmless from and against any and all claims, damages and
#   liabilities asserted by third parties (including claims for
#   negligence) which arise directly or indirectly from the use of the
#   Software or the sale of any products based on the Software.
#
#   No part of the Software may be reproduced, modified, transmitted or
#   transferred in any form or by any means, electronic or mechanical,
#   without the express permission of the University. The permission of
#   the University is not required if the said reproduction, modification,
#   transmission or transference is done without financial return, the
#   conditions of this Licence are imposed upon the receiver of the
#   product, and all original and amended source code is included in any
#   transmitted product. You may be held legally responsible for any
#   copyright infringement that is caused or encouraged by your failure to
#   abide by these terms and conditions.
#
#   You are not permitted under this Licence to use this Software
#   commercially. Use for which any financial return is received shall be
#   defined as commercial use, and includes (1) integration of all or part
#   of the source code or the Software into a product for sale or license
#   by or on behalf of Licensee to third parties or (2) use of the
#   Software or any derivative of it for research with the final aim of
#   developing software products for sale or license to a third party or
#   (3) use of the Software or any derivative of it for research with the
#   final aim of developing non-software products for sale or license to a
#   third party, or (4) use of the Software to provide any service to an
#   external organisation for which payment is received. If you are
#   interested in using the Software commercially, please contact Oxford
#   University Innovation ("OUI"), the technology transfer company of the
#   University, to negotiate a licence. Contact details are:
#   fsl@innovation.ox.ac.uk quoting Reference Project 9564, FSL.
export LC_ALL=C

export LC_ALL=C

Usage() {
    cat <<EOF

dual_regression v0.6

***NOTE*** ORDER OF COMMAND-LINE ARGUMENTS IS DIFFERENT FROM PREVIOUS VERSION

Usage: dual_regression <group_IC_maps> <des_norm> <design.mat> <design.con> <n_perm> [--thr] <output_directory> <input1> <input2> <input3> .........
e.g.   dual_regression groupICA.gica/groupmelodic.ica/melodic_IC 1 design.mat design.con 500 0 grot \`cat groupICA.gica/.filelist\`

<group_IC_maps_4D>            4D image containing spatial IC maps (melodic_IC) from the whole-group ICA analysis
<des_norm>                    0 or 1 (1 is recommended). Whether to variance-normalise the timecourses used as the stage-2 regressors
<design.mat>                  Design matrix for final cross-subject modelling with randomise
<design.con>                  Design contrasts for final cross-subject modelling with randomise
<n_perm>                      Number of permutations for randomise; set to 1 for just raw tstat output, set to 0 to not run randomise at all.
[--thr]                       Perform thresholded dual regression to obtain unbiased timeseries for connectomics analyses (e.g., with FSLnets)
<output_directory>            This directory will be created to hold all output and logfilesg
<input1> <input2> ...         List all subjects' preprocessed, standard-space 4D datasets

<design.mat> <design.con>     can be replaced with just
-1                            for group-mean (one-group t-test) modelling.
If you need to add other randomise options then edit the line after "EDIT HERE" in the dual_regression script

EOF
    exit 1
}

############################################################################

[ "$6" = "" ] && Usage

ORIG_COMMAND=$*

ICA_MAPS=`${FSLDIR}/bin/remove_ext $1` ; shift

DES_NORM=--des_norm
if [ $1 = 0 ] ; then
  DES_NORM=""
fi ; shift

if [ $1 = "-1" ] ; then
  DESIGN="-1"
  shift
else
  dm=$1
  dc=$2
  DESIGN="-d $1 -t $2"
  shift 2
fi

NPERM=$1 ; shift

NAF2=0
if [ $1 = "--thr" ] ; then
  NAF2=1
  shift
fi


# NOTES: replaced ID_dr*='<job submit code>' syntax with '<job submit code>' (problematic)

FSLurmDIR="/scratch/tyoeasley/WAPIAW3/brainrep_data/ICA_data/FSL_slurm"
OUTPUT=`${FSLDIR}/bin/remove_ext $1` ; shift

while [ "_${1}" != _ ] ; do
  INPUTS="$INPUTS `${FSLDIR}/bin/remove_ext $1`"
  shift
done

############################################################################
############################################################################
############################################################################

mkdir $OUTPUT
LOGDIR=${OUTPUT}/scripts+logs
mkdir $LOGDIR
echo $ORIG_COMMAND > $LOGDIR/command
if [ "$DESIGN" != -1 ] ; then
  /bin/cp $dm $OUTPUT/design.mat
  /bin/cp $dc $OUTPUT/design.con
fi

# Key sizes
N_ICs=`$FSLDIR/bin/fslnvols $ICA_MAPS`

############################################################################
echo "creating common mask"
j=0
for i in $INPUTS ; do
  echo "$FSLDIR/bin/fslmaths $i -Tstd -bin ${OUTPUT}/mask_`${FSLDIR}/bin/zeropad $j 5` -odt char" > "${LOGDIR}/drA"
	$FSLurmDIR/fsl_sub_slurm.sh -j true -T 10 -N mask_generation1 -l $LOGDIR -f "${LOGDIR}/drA"
# 	ID_drA=`$FSLurmDIR/fsl_sub_slurm.sh -j true -T 10 -N mask_generation1 -l $LOGDIR -f ${LOGDIR}/drA`
  j=`echo "$j 1 + p" | dc -`
done

############################################################################
cat <<EOF > ${LOGDIR}/drB
\$FSLDIR/bin/fslmerge -t ${OUTPUT}/maskALL \`\$FSLDIR/bin/imglob ${OUTPUT}/mask_*\`
\$FSLDIR/bin/fslmaths $OUTPUT/maskALL -Tmin $OUTPUT/mask
\$FSLDIR/bin/imrm $OUTPUT/mask_*
EOF
chmod a+x "${LOGDIR}/drB"
$FSLurmDIR/fsl_sub_slurm.sh -j true -T 5 -N mask_generation2 -l $LOGDIR -f "${LOGDIR}/drB"
# ID_drB=`$FSLurmDIR/fsl_sub_slurm.sh -j true -T 5 -N mask_generation2 -l $LOGDIR -f ${LOGDIR}/drB`

############################################################################
echo "doing the dual regressions"
j=0
for i in $INPUTS ; do
  s=subject`${FSLDIR}/bin/zeropad $j 5`
  printf "$FSLDIR/bin/fsl_glm -i $i -d $ICA_MAPS -o $OUTPUT/dr_stage1_${s}.txt --demean -m $OUTPUT/mask  \n \
        $FSLDIR/bin/fsl_glm -i $i -d $OUTPUT/dr_stage1_${s}.txt -o $OUTPUT/dr_stage2_$s --out_z=$OUTPUT/dr_stage2_${s}_Z --demean -m $OUTPUT/mask $DES_NORM  \n \
        $FSLDIR/bin/fslsplit $OUTPUT/dr_stage2_$s $OUTPUT/dr_stage2_${s}_ic" > "${LOGDIR}/drC"
  
$FSLurmDIR/fsl_sub_slurm.sh -T 30 -N dual_regression -l $LOGDIR -f "${LOGDIR}/drC"
#   ID_drC=`$FSLurmDIR/fsl_sub_slurm.sh -T 30 -N dual_regression -l $LOGDIR -f ${LOGDIR}/drC`
  j=`echo "$j 1 + p" | dc -`
done
$FSLurmDIR/fsl_sub_slurm.sh -j true -T 30 -N dual_regression -l $LOGDIR -f "${LOGDIR}/drC"
# ID_drC=`$FSLurmDIR/fsl_sub_slurm.sh -j true -T 30 -N dual_regression -l $LOGDIR -f ${LOGDIR}/drC`

############################################################################
# For thresholded maps, try and normalise such that null is N(0,1)
# Because of the presence of signal in the tails, we use median and IQR as
# robust estimators for the mean & standard deviation
# https://en.wikipedia.org/wiki/Robust_measures_of_scale
if [ $NAF2 -eq 1 ] ; then
   echo "doing thresholded dual regression"
   j=0
   for i in $INPUTS ; do
      s=subject`${FSLDIR}/bin/zeropad $j 5`
      STAGE2_MAPS=${OUTPUT}/dr_stage2_${s}
      STAGE4_MAPS=${OUTPUT}/dr_stage4_${s}
      echo "$FSLDIR/bin/fslsplit ${STAGE2_MAPS} ${STAGE2_MAPS}_split -t \n \
            for im in \$($FSLDIR/bin/imglob ${STAGE2_MAPS}_split*); do \
                mean=\$($FSLDIR/bin/fslstats \${im} -p 50) \n \
                std=\$($FSLDIR/bin/fslstats \${im} -p 25 -p 75 |  awk '{ print (\$2 - \$1) / 1.349 }') \n \
                $FSLDIR/bin/fslmaths \${im} -sub \${mean} -div \${std} \${im}_norm \n \
            done \n \
            $FSLDIR/bin/fslmerge -t ${STAGE4_MAPS}_norm \$(imglob ${STAGE2_MAPS}_split*_norm*) \n \
            $FSLDIR/bin/imrm \$(imglob ${STAGE2_MAPS}_split*) \n \
            $FSLDIR/bin/fslmaths ${STAGE4_MAPS}_norm -abs -thr 2 -bin ${STAGE4_MAPS}_mask \n \
            $FSLDIR/bin/fslmaths ${STAGE4_MAPS}_norm -mul ${STAGE4_MAPS}_mask ${STAGE4_MAPS}_thresh \n \
            $FSLDIR/bin/fsl_glm -i ${i} -d ${STAGE4_MAPS}_thresh -o ${OUTPUT}/dr_stage4_${s}.txt --demean -m ${OUTPUT}/mask \n \
            " > ${LOGDIR}/drD
$FSLurmDIR/fsl_sub_slurm.sh -N thresholdedDR -l $LOGDIR -f "${LOGDIR}/drD"
#       ID_drD=`$FSLurmDIR/fsl_sub_slurm.sh -N thresholdedDR -l $LOGDIR -f ${LOGDIR}/drD`
      j=`echo "$j 1 + p" | dc -`
   done
$FSLurmDIR/fsl_sub_slurm.sh -j true -N thresholdedDR -l $LOGDIR -f "${LOGDIR}/drD"
#    ID_drD=`$FSLurmDIR/fsl_sub_slurm.sh -j true -N thresholdedDR -l $LOGDIR -f ${LOGDIR}/drD`
fi

############################################################################
echo "sorting maps and running randomise"
j=0
while [ $j -lt $N_ICs ] ; do
  jj=`$FSLDIR/bin/zeropad $j 4`

  RAND=""
  if [ $NPERM -eq 1 ] ; then
    RAND="$FSLDIR/bin/randomise -i $OUTPUT/dr_stage2_ic$jj -o $OUTPUT/dr_stage3_ic$jj -m $OUTPUT/mask $DESIGN -n 1 -V -R"
  fi
  if [ $NPERM -gt 1 ] ; then
    # EDIT HERE
    RAND="$FSLDIR/bin/randomise -i $OUTPUT/dr_stage2_ic$jj -o $OUTPUT/dr_stage3_ic$jj -m $OUTPUT/mask $DESIGN -n $NPERM -T -V"
  fi

  printf "$FSLDIR/bin/fslmerge -t $OUTPUT/dr_stage2_ic$jj \`\$FSLDIR/bin/imglob $OUTPUT/dr_stage2_subject*_ic${jj}.*\` \n \
        $FSLDIR/bin/imrm \`\$FSLDIR/bin/imglob $OUTPUT/dr_stage2_subject*_ic${jj}.*\` \n $RAND" > ${LOGDIR}/drE
  j=`echo "$j 1 + p" | dc -`
$FSLurmDIR/fsl_sub_slurm.sh -T 60 -N randomise -l $LOGDIR -f "${LOGDIR}/drE"
#   ID_drE=`$FSLurmDIR/fsl_sub_slurm.sh -T 60 -N randomise -l $LOGDIR -f ${LOGDIR}/drE`
done
